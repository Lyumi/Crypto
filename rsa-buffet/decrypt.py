import random
from Crypto.Cipher import AES,PKCS1_OAEP
from Crypto.PublicKey import RSA


def decrypt(private_key, ciphertext):
  """Decrypt a message with a given private key.

  Takes in a private_key generated by Crypto.PublicKey.RSA, which must be of
  size exactly 4096

  If the ciphertext is invalid, return None
  """
  if len(ciphertext) < 512 + 16:
    return None
  msg_header = ciphertext[:512]
  msg_iv = ciphertext[512:512+16]
  msg_body = ciphertext[512+16:]
  try:
    symmetric_key = PKCS1_OAEP.new(private_key).decrypt(msg_header)
  except ValueError:
    return None
  if len(symmetric_key) != 32:
    return None
  return AES.new(symmetric_key,
      mode=AES.MODE_CFB,
      IV=msg_iv).decrypt(msg_body)


def egcd(a, b):
  xp, x = 1, 0;
  yp, y = 0, 1
  while b:
    q = a // b
    x, xp = xp - q * x, x
    y, yp = yp - q * y, y
    a, b = b, a % b
  return a, xp, yp


def modinv(a, m):
  g, x, y = egcd(a, m)
  if g != 1:
    raise Exception('modular inverse does not exist')
  else:
    return x % m


p = 18463356930560971453838089109562090786167420697835032364060502526355101951522469459005132085186109640243049179637784230771525619985937737838169945472692048412226380699487105760788993716257195496980734178090534123199103044077119142605171088793335699575722788289323399685265778921647561234055248973628979087902978301717148606362735522426763773877772153881640285664705622385867092520494253639375799580745445353356024745300293567095271052482140713835413254017982572290854485679559197318493453318312105813338807124670296558504382291169592519052216594412033375436321141905848045231360058665309623497930074117321053331207297
q = 30257147111411059389829217122164473765269096185468455989636169449034543170771257207599124999810148445669040228700883837331391963924130479685137116301358841933351775717163734608788765518211353375452047683423563939461414714334168285711510050084030505035552907998361225618597206785061977517333462418922227515909816733561014439060263938172404521932999328169827032880115506628203514465399598329974727868726968908083164460804251616788183269594854128605325795075866442005335495824170009519268111833347001190253785911791269120213540490293047466954567349568834749203004743222972224904274254247053056092974279309978281078769063
N = 558648506818474261267926047815663564748461840589382794341879898045098955763377286011667977696237182735822338560444489236573716372544780763605058551497478421716695344033790440922077026632959955153636731271279530879698494369588461643355919436273660662159076752508148851041536971067982979226147537361176787716029952139870201713878877243032756910168897737917616572847826633244329952012102367416741268778934218199568064941081826566443189208251171186979473599344539318984264322522232685526823205535961297363403448343924661327298106111649831891708199941928427214309187101550517524055435481742017905815136802698323157353546126780284827134167563307825000360329981837590299960910817295539277452762627317845829666639427884767086690783733059159124150824416125937870140463622427876694849937911497503756067589073583336959038335208291257532551330243155516181339811318004840305586236286443238140235018884985545095377560037625784549759454267069524818501442321838507902367554708929358105208842619264547469164614046722155870893273726762337125054030229277549499202475208465532220431433529448716325851822414527832136466295720413026664365817577803620995791798155374498287030048333500284317171445315596658550078267456708319243685452572756019788684443452711
e = 65537
phi =(p-1)*(q-1)
d = modinv(e, phi)


if __name__ == "__main__":
  p = 18463356930560971453838089109562090786167420697835032364060502526355101951522469459005132085186109640243049179637784230771525619985937737838169945472692048412226380699487105760788993716257195496980734178090534123199103044077119142605171088793335699575722788289323399685265778921647561234055248973628979087902978301717148606362735522426763773877772153881640285664705622385867092520494253639375799580745445353356024745300293567095271052482140713835413254017982572290854485679559197318493453318312105813338807124670296558504382291169592519052216594412033375436321141905848045231360058665309623497930074117321053331207297
  q = 30257147111411059389829217122164473765269096185468455989636169449034543170771257207599124999810148445669040228700883837331391963924130479685137116301358841933351775717163734608788765518211353375452047683423563939461414714334168285711510050084030505035552907998361225618597206785061977517333462418922227515909816733561014439060263938172404521932999328169827032880115506628203514465399598329974727868726968908083164460804251616788183269594854128605325795075866442005335495824170009519268111833347001190253785911791269120213540490293047466954567349568834749203004743222972224904274254247053056092974279309978281078769063
  N = 558648506818474261267926047815663564748461840589382794341879898045098955763377286011667977696237182735822338560444489236573716372544780763605058551497478421716695344033790440922077026632959955153636731271279530879698494369588461643355919436273660662159076752508148851041536971067982979226147537361176787716029952139870201713878877243032756910168897737917616572847826633244329952012102367416741268778934218199568064941081826566443189208251171186979473599344539318984264322522232685526823205535961297363403448343924661327298106111649831891708199941928427214309187101550517524055435481742017905815136802698323157353546126780284827134167563307825000360329981837590299960910817295539277452762627317845829666639427884767086690783733059159124150824416125937870140463622427876694849937911497503756067589073583336959038335208291257532551330243155516181339811318004840305586236286443238140235018884985545095377560037625784549759454267069524818501442321838507902367554708929358105208842619264547469164614046722155870893273726762337125054030229277549499202475208465532220431433529448716325851822414527832136466295720413026664365817577803620995791798155374498287030048333500284317171445315596658550078267456708319243685452572756019788684443452711
  e = 65537
  phi = (p - 1) * (q - 1)
  d = modinv(e, phi)

  f = open('key5', 'wb')
  key = (RSA.construct((N,e,d,p,q)))
 # k_text = open('r').read() ## key, text = (6,3), (1,5), (2,1) (3,4) (5,2)

  c = open('ciphertext-2.bin','rb').read()

  f = open('plaintext-2.txt','wb')
  f.write(decrypt(key, c))

  #Used key 0,1,2,3,6

